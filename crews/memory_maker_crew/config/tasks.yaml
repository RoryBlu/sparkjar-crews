analyze_text:
  description: >
    Analyze the provided text content to identify and extract:
    1. Entities mentioned (people, projects, organizations, concepts, tools, technologies, etc.)
    2. Relationships and connections between entities
    3. Facts, statements, and assertions that should be remembered
    4. Skills, capabilities, or expertise mentioned
    5. Preferences, opinions, decisions, or recommendations
    6. Action items, commitments, or future plans
    7. Insights, patterns, or important conclusions
    8. Context and metadata that enriches understanding
    
    Text to analyze:
    {text_content}
    
    Additional metadata:
    {metadata}
    
    Focus on extracting ANY information that would be valuable to remember for 
    future reference, decision-making, or knowledge building. Adapt your analysis
    to the type and style of text you're processing.
  expected_output: >
    A comprehensive list of identified entities, relationships, and observations 
    extracted from the text, organized by category with clear descriptions 
    and relevant context.

structure_memories:
  description: >
    Take the extracted information from the text analysis and structure 
    it into proper memory entities with observations. For each identified piece 
    of information:
    
    1. Determine the appropriate entity type (person, project, organization, 
       concept, skill, etc.)
    2. Define clear entity names that are unique and descriptive
    3. Categorize observations by type (fact, skill, preference, decision, etc.)
    4. Add appropriate metadata including confidence levels and sources
    5. Map relationships between entities with proper relationship types
    6. Ensure consistency with existing memory structures
    
    Structure the memories in a format ready for storage in the memory system.
  expected_output: >
    Structured memory entities with properly formatted observations and 
    relationships, including all necessary metadata and ready for storage 
    via the memory tool.

store_memories:
  description: >
    Use the memory wrapper tools to store all structured memories in the system. 
    
    Available tools for storing memories:
    
    1. create_memory_entity: Create a new entity
       - Parameters: name (string), entity_type (string), metadata (optional dict)
       - Example: create_memory_entity(name="leave_policy", entity_type="policy", metadata={"category": "HR"})
    
    2. add_memory_observation: Add observations to existing entities
       - Parameters: entity_name, observation, observation_type, source
       - Example: add_memory_observation(entity_name="leave_policy", observation="21 days annual leave", observation_type="policy_content")
    
    3. create_memory_relationship: Link entities together
       - Parameters: from_entity, to_entity, relationship_type
       - Example: create_memory_relationship(from_entity="leave_policy", to_entity="hr_department", relationship_type="managed_by")
    
    4. store_entity_with_observations: Create entity and add observations in one call
       - Parameters: name, entity_type, observations (list), metadata
       - Example: store_entity_with_observations(name="policy", entity_type="policy", observations=[{"content": "...", "type": "policy_content"}])
    
    5. search_memories: Verify storage with hierarchical search
       - Parameters: query_text, entity_type (optional), include_hierarchy (default: True)
       - Example: search_memories(query_text="leave policy", include_hierarchy=True)
    
    The tools handle all JSON formatting internally. Just call them with regular parameters!
    The hierarchical context (actor, synth_class, client levels) is handled automatically.
  expected_output: >
    A detailed report of all memory operations performed, including:
    - Entities created
    - Observations added to each entity
    - Relationships stored
    - Any errors encountered
    - Verification that memories were stored correctly
    - Summary of what was learned from the conversation